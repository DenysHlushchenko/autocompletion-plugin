data class TrieNode(
    var children: MutableMap<Char, TrieNode> = mutableMapOf(),
    var suggestions: List<String>? = null,
    var endOfWord: Boolean = false,
);

class Trie {
    private val root = TrieNode();

    /**
     * Inserts a word and its suggestions into the trie.
     * @param word The word to insert.
     * @param suggestions The suggestions for the word generated by the Ollama model.
     */
    fun insert(word: String, suggestions: List<String>) {
        var current = root;
        for (char in word) {
            current = current.children.computeIfAbsent(char) { TrieNode() }
            current.suggestions = if (current.suggestions == null) {
                suggestions
            } else {
                (current.suggestions!! + suggestions).distinct().take(10);
            }
        }
        current.endOfWord = true;
    }

    /**
     * Gets suggestions for a word.
     * @param word The word to get suggestions for.
     * @return A list of suggestions for the word.
     */
    fun getSuggestions(word: String): List<String> {
        var current = root;
        for (char in word) {
            current = current.children[char] ?: return emptyList();
        }
        return current.suggestions?.sorted() ?: emptyList();
    }

    /**
     * Gets the number of nodes in the trie.
     * @return The number of nodes in the trie.
     */
    fun getSize(): Int {
        return countNodes(root);
    }

    /**
     * Prints the trie.
     */
    fun printTrie() {
        fun dfs(node: TrieNode, word: String) {
            if (node.suggestions != null) {
                println(word + " -> " + node.suggestions);
            }

            for ((char, child) in node.children) {
                dfs(child, word + char);
            }
        }

        dfs(root, "");
    }

    /**
     * Recursively counts the number of nodes in the trie.
     * @param node The node to count.
     * @return The number of nodes in the trie.
     */
    private fun countNodes(node: TrieNode): Int {
        var count = 1;
        for (child in node.children.values) {
            count += countNodes(child);
        }
        return count;
    }
};